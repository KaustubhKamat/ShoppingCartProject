package controller;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.stereotype.Controller;

import com.niit.shoppingcart.DAO.CategoryDAO;
import com.niit.shoppingcart.DAO.ProductDAO;
import com.niit.shoppingcart.DAO.SupplierDAO;
import com.niit.shoppingcart.model.Category;
import com.niit.shoppingcart.model.Product;
import com.niit.shoppingcart.model.Supplier;

@Controller
@ComponentScan("com.niit.shoppingcart")
public class ProductController {
	
	public static Logger log = LoggerFactory.getLogger(ProductController.class);
	
	@Autowired
	public ProductDAO productDAO;
	
	@Autowired
	public Product product;
	
	@Autowired
	public SupplierDAO supplierDAO;
	
	@Autowired 
	public Supplier supplier;
	
	@Autowired
	public CategoryDAO categoryDAO;
			
	@Autowired
	public Category category;

		@RequestMapping("/AddProduct")
		public ModelAndView showAddCategoryPage() {
			ModelAndView mv = new ModelAndView("Home");
			mv.addObject("category", category);
			mv.addObject("categoryList", categoryDAO.list());
			mv.addObject("AdminHasClickedAddCategory", "true");
			return mv;
		}

		@RequestMapping("/DeleteCategory")
		public ModelAndView showDeleteCategoryPage() {
			ModelAndView mv = new ModelAndView("Home");
			mv.addObject("categoryList", categoryDAO.list());
			mv.addObject("AdminHasClickedDeleteCategory", "true");
			return mv;
		}


		public ModelAndView listOfCategories() {
			ModelAndView mv = new ModelAndView("/Home");
			mv.addObject("category", category);
			mv.addObject("categoryList", categoryDAO.list());
			mv.addObject("AdminHasClickedCategories", "true");
			return mv;
		}

		/*
		 * @RequestMapping(value ="/add_category", method = RequestMethod.POST)
		 * public ModelAndView
		 * processAddCategory(@RequestParam(value="category_id")String id
		 * , @RequestParam(value="category_name") String
		 * name, @RequestParam(value="category_description")String description)
		 * 
		 * { ModelAndView mv = new ModelAndView("Home"); category.setid(id);
		 * category.setName(name); category.setDescription(description); if
		 * (categoryDAO.save(category) == true) { mv.addObject("SuccessSaveMessage",
		 * "SuccessfullyCreatedTheCategory"); } else {
		 * mv.addObject("ErrorSaveMessage", "CategoryNotSaved"); } return mv; }
		 */

		@RequestMapping("/AddCategory_add")
		public String processAddCategory(@ModelAttribute("category") Category category, Model model) throws Exception
		
		{
			
			categoryDAO.save(category); 
			if (categoryDAO.save(category) == true) {
				model.addAttribute("SuccessMessage", "You have successfully created the category");
			} else {
				model.addAttribute("ErrorMessage", "The Category is not created. Please try again");
			}
			model.addAttribute("category", category);
			model.addAttribute("categoryList", categoryDAO.list());

			return "/Home";

		}

		public String processDeleteCategory(@PathVariable("id") String id, Model model) {
			boolean b = categoryDAO.delete(category);

			if (b != true) {
				model.addAttribute("SuccessDeleteCategory", "CategoryIsSuccesfullyDeleted");
			} else {
				model.addAttribute("ErrorDeleteCategory", "CategoryIsNotCreated");
			}

			return "forward:/AddCategory";

		}

		/*
		 * @RequestMapping("AddCategory/edit") public ModelAndView
		 * editUser(@RequestParam String id,
		 * 
		 * @ModelAttribute ) { String employeeObject = employee_Test.getId(); return
		 * new ModelAndView("edit", "employeeObject", employeeObject); }
		 */
	}

	
	
}
